												PRÁCTICA 7: BLOQUEOS Y TRANSACCIONES 
														Bases de datos 
 
1. Bloqueos (Select) 
 
	1. Desde Oracle SQL Developer, crear la siguiente tabla de cuentas, insertar tuplas y confirmarlas: 
		CREATE TABLE cuentas ( 
			numero number primary key, 
			saldo number not null 
		); 
 
		INSERT INTO cuentas VALUES (123, 400); 
		INSERT INTO cuentas VALUES (456, 300); 
		COMMIT; 
	2. Abrir dos sesiones T1 y T2 de SQLPlus con tu usuario y contraseña 
		Nota para SQLPlus: Oracle 11g R2 cliente: Menú Inicio ? Programas ? BBDD ? Oracle ? 
		Consola de Oracle 11g 
		C:> sqlplus usuario@BD as psswd 
	3. Deshabilitar la autoconfirmación con: 
		SET AUTOCOMMIT OFF. 
	4. Desde T1 aumentar 100 euros el saldo de la cuenta 123. 
	5. Desde T2 consultar el saldo de la cuenta 123. ¿Cuánto es su saldo? 

	-Sigue siendo 400.
	
	6. Desde T1 confirmar los datos con: 
		COMMIT; 
	7. Desde T2 consultar el saldo de la cuenta 123. ¿Cuánto es su saldo? 
	
	-Ahora es 500.
	
2. Bloqueos (Update) 
	1. Deshabilitar la autoconfirmación en T2 con: 
		SET AUTOCOMMIT OFF. 
	2. Desde T1 aumenta 100 euros el saldo de la cuenta 123. 
	3. Desde T2 aumenta 200 euros el saldo de la cuenta 123. ¿Se puede? ¿Qué le pasa a T2? 
	
	-No se puede. Se queda esperando a que se confirme o se deshaga la operación de T1.
	
	4. Desde T1 confirmar los datos con: 
		COMMIT; 
	¿Qué le pasa a T2? 

	-Que ejecuta la operación que habías mandado.
	
	5. Desde T1 consultar el saldo de la cuenta 123. ¿Cuánto es su saldo? 

	-El saldo es 600.
	
	6. Desde T2 confirmar los datos con: 
		COMMIT; 
	7. Desde T1 consultar el saldo de la cuenta 123. ¿Cuánto es su saldo? 

	-Ahora el saldo es 800.
	
 3. Bloqueos (Deadlock) 
	1. Desde T1 aumenta 100 euros el saldo de la cuenta 123. 
	2. Desde T2 aumenta 200 euros el saldo de la cuenta 456. 
	3. Desde T1 aumenta 300 euros el saldo de la cuenta 456. 
	4. Desde T2 aumenta 400 euros el saldo de la cuenta 123. ¿Qué ocurre? 
	
	-Ambas sesiones se quedan bloqueadas a la espera.
	
4. Niveles de aislamiento 
	Explicar el comportamiento de las transacciones T1 y T2. Asegúrate de haber confirmado los últimos 
	cambios: 
	
	-Al hacer el commit se actualiza todo y te devuelve el control.
	
	1. En T1: 
		ALTER SESSION SET ISOLATION_LEVEL = SERIALIZABLE; 

	-Nos va a permitir mantener la lógica de la lectura.
 
	2. En T1 : 
		SELECT SUM(saldo) FROM cuentas; 
		
	3. En T2 : 
		UPDATE cuentas SET saldo=saldo +100; 
		COMMIT; 
	4. En T1: 
		SELECT SUM(saldo) FROM cuentas; 
	¿Qué ha pasado? 
	
	-Que no ha cambiado el resultado a pesar del commit en T2.
		Esto se debe a que
	5. En T1: 
ALTER SESSION SET ISOLATION_LEVEL = READ COMMITTED; 
6. En T1 : 
SELECT SUM(saldo) FROM cuentas; 
7. En T2 : 
UPDATE cuentas SET saldo=saldo +100; 
COMMIT; 
8. En T1 : 
SELECT SUM(saldo) FROM cuentas; 
¿Qué ha pasado? Explicar si hay alguna diferencia según los niveles de aislamiento. 
 
5. Transacciones 
En una central de reservas de butacas para eventos (conciertos, ópera, cine, …) se desea desarrollar 
una aplicación para que los clientes puedan reservar butacas en estos eventos. Se proporciona un script 
(script.sql, y que llama a otros dos: preguntar.sql y no_preguntar.sql) que consulta y 
actualiza los datos de dos tablas. La primera, butacas(id number(8) primary key, evento 
nvarchar(30), fila nvarchar(10), columna nvarchar(10)) contiene todas las 
butacas disponibles de cada evento. La segunda, reservas, con el mismo esquema que butacas, 
almacena las butacas que se han reservado. El script incluye los valores para el evento, fila y columna, 
comprueba que la butaca existe y consulta si no está reservada previamente. Al ejecutarlo, pide la 
confirmación para la reserva y después inserta en la tabla reservas una tupla que representa a la butaca 
reservada. 
1. Crea las tablas y secuencias para los identificadores: 
CREATE TABLE butacas(id number(8) primary key, 
 evento varchar(30), 
 fila varchar(10), 
 columna varchar(10)) ; 
CREATE TABLE reservas(id number(8) primary key, 
 evento varchar(30), 
 fila varchar(10), 
 columna varchar(10)) ; 
CREATE SEQUENCE Seq_Butacas INCREMENT BY 1 START WITH 1 
NOMAXVALUE; CREATE SEQUENCE Seq_Reservas INCREMENT BY 1 START WITH 1 
NOMAXVALUE; 
2. Inserta algunos valores de prueba en butacas: 
INSERT INTO butacas VALUES (Seq_Butacas.NEXTVAL,'Circo','1','1'); 
INSERT INTO butacas VALUES (Seq_Butacas.NEXTVAL,'Circo','1','2'); 
INSERT INTO butacas VALUES (Seq_Butacas.NEXTVAL,'Circo','1','3'); 
COMMIT; 
3. Prueba el script desde SQL Developer reservando la fila 1, columna 1 para 'Circo'. Antes hay que 
modificar las rutas que hacen referencia a los otros scripts a la carpeta en donde se hayan 
depositado. 
4. Intenta reservar de nuevo la misma fila desde la misma consola SQL Plus y comprueba que no sea 
posible. 
5. Realiza una nueva reserva desde la misma consola para la fila 1, columna 4 para la 'Ópera' y 
comprueba que no es posible porque no existe esa butaca. 
6. Realiza una nueva reserva desde la misma consola para la fila 1, columna 2 para la 'Ópera' pero sin 
realizar aún la confirmación. 
7. Abre una nueva instancia de SQL Developer y realiza la misma reserva anterior desde esta 
instancia. Confirma la reserva. 
8. Confirma la reserva del punto 7. ¿Qué sucede? 
9. Modifica el script para resolver el punto anterior. 
